最重要的函数!!!!!


1.函数声明
function test(){}
新的规则：谷歌里if判断里面不能声明函数!!!

2.函数表达式（命名函数表达式、匿名函数表达式）
var test = function sum(){}
var test = function (){}
两者区别是test.name不同

3.函数的参数
function test (a,b){}
test(1,2,3)
a、b为形参  1 2 3为实参
两个参数数量可以不等，当形参未知，实参可以用数组表示：arguments为一个类数组
arguments.length为实参的长度，test.length为形参长度
两者存在映射关系，当一个改变另一个也跟着改变。
特殊!!!!当实参数量小于形参数量，不存在映射关系。例如a跟arguments[0]

4.终止函数
return  
用于终止函数或者返回值(相当于隐式转换)  例如：return +"adb"

递归：先找规律后找出口
function jc(n){
   if( n == 1 ){
	 return 1
   }
   return n * jc(n - 1)
}
求阶层，是典型的递归。缺点是运行慢，先执行的最后输出，优点是代码简洁。
 
 5.全局变量
 定义在外面的变量
 
 6.局部变量
 定义在函数里面的变量，当函数里面没有定义的时候可以用全局变量
 里面的可以用外面的，反之不可以。最里面的权限最大。两个函数之间不可以拿对方的变量。
 
 
 
 
 JS运行三部曲
 1.语法分析：通篇扫描有没有低级语法错误(缺少一个括号)
 2.预编译(重点!!!)：解决执行顺序
 3.解释执行
 
 预编译
 1.未经声明的变量就赋值，变量归window所有。window是一个对象，里面存储变量。
 例如： function test(){
          var a = b = 123; 	   
       }
	   test();
先把123赋值给b，b未声明，所以b只能给window。再把b赋值给a。
在全局里面console.log(a)报错，console.log(b)输出123	   
 2.一切声明的全局变量都是window的，window相当于全局的域
 window{a:1,b:2,...} window.a可输出a的值
 
 预编译四步曲
 1.创建AO对象
 2.找形参和变量声明，赋给AO对象，值为undefined，如有重复只写一个
 3.将实参和形参统一
 4.在函数体里面找函数声明，值赋给函数（优先级最高可覆盖前面的值）
 例如：
 function fn(a){
    console.log(a);
	var a = 123;
	console.log(a);
	function a(){};
	console.log(a);
	var b = function b(){};
	console.log(b);
	function d(){};
 }
 fn(1);
 
 AO对象是函数里面的对象，全局有GO(global)对象，步骤如上，少了第三步。
 GO相当于window，AO相当于函数的仓库，里面存放变量和值。
 先执行GO再执行AO!!!
 
 
例题：
     var str = false + 1;
     document.write(str);
     var demo = false == 1;
     document.write(demo);
     if(typeof(a) && -true + (+undefined) + ""){
        document.write("good")
     }
     if(11 + '11'*2 == 33){
       document.write('good')
     }
     !!" " + !!'' - !!false || document.write('OH MY GOD!!')
 
8.执行期上下文
函数执行时创建一个执行期上下文的内部对象（AO），每次执行都会创建，当函数执行完，
它产生的执行期上下文销毁。

9.作用域
[[scope]]是js函数对象的一个隐性属性，不可访问，仅供js引擎存取。也叫作用域。
存取了执行期上下文对象的集合，这个集合呈链式链接，也叫作用域链。
function a(){

}
函数在声明的时候就有a.[[scope]]这个作用域，里面为0，只有一个GO
当函数被执行的时候，创建了AO，AO会跑到作用域链的顶端。
在哪个函数找变量就在那个函数的作用域链从上往下依次寻找!!!!

function a(){
  function b(){
  }
}                                b函数定义的时候，存在于当前环境下的执行期上下文
当a defined -->0 : GO            所以a执行跟b定义是产生一个的作用域
                                 里面是同一个aAO。
  a doing   -->0 : aAO           当b执行完，bAO销毁
            -->1 : GO            当a执行完，aAO销毁，b的作用域销毁。
			
  b defined -->0 : aAO
            -->1 : GO
			
  b doing   -->0 : bAO
            -->1 : aAO
            -->2 : GO

10.闭包!!!!
当一个里面的函数被保存到外部，一定生成闭包。
里面函数的作用域依旧存在，闭包会导致原有的作用域链不释放（不销毁），造成内存泄漏
（就像手捧沙子，漏的越多，手上剩下的越少，即可用内存越少）。
function a(){
 var a = 0; 
 functionb(){
   a ++;
   console.log(a) 
  }
 return b
}
var demo = a()
b函数就被保存出来，带着作用域aAO和GO。

立即执行函数（执行完立即被销毁）-->针对初始化功能的函数
(function a(){}())  正常表达形式，可传参，跟普通函数有一样功能
var num = (function (){}()) 把数据保存出来

被执行符号执行的表达式就变成立即执行函数!!!  ()
只有表达式才能被执行符号执行，例如
function(){}函数声明不能被()执行，但是(function a(){})可以，括号是运算符，当函数
加括号就变成表达式，里面的函数名字天然忽略消失。+ - !正负非都可以把函数变成表达式。

，是一个运算符，作用是把，后面的运算结果返回。


用闭包解决闭包产生的问题
    function test(){
        var arr = [];
        for(var i = 0; i < 10 ; i ++){
           (function(j){
		    arr[j] = function () {
              document.write(j + '');
            }
		   }(i))
        }
            return arr;
    }
        var myArr = test();
        for(var j = 0; j < 10 ;j ++){
          myArr[j]();
    }
一对一对十，把i当作实参传给j，每个j都保存下来。当执行函数的时候，找j	
	
闭包的作用：函数累加器、可作缓存、可实现封装，属性私有化、模块化开发，防止污染全局变量

私有化变量
    function Deng(name,wife){
      var perwife = 'chen';
	  
      this.name = name;
      this.wife = wife;
      this.divorce = function(){
        this.wife = perwife;
      }
      this.changeprewife = function(target){
        perwife = target;
      }
      this.sayprewife = function(){
        console.log(perwife);
      }
    }
    var deng = new Deng('deng','liu')
因为new把构造函数内部this的属性返回到对象里面，方法产生的执行期上下文也返回出来，Deng
的AO，产生了闭包，prewife变成deng的私有化变量，不能通过deng.prewife访问，但是可以用
deng里面的方法操作。

模块化开发，防止污染全局变量
 var init = (function(){
          var name = 123;
          function callName(){
            console.log(name)
          }
          return function(){
            callName()
          }
       }())	
--->init = function (){ callName()}
功能可以复用的，用函数封装，下次直接调用，不用考虑是否会污染全局变量。
里面的函数形成个闭包，留出一个函数作为接口传给init，这个函数执行里面的函数作为
中转，当调用init时就会启用接口里面的函数。这个函数使用的变量是私有化变量，不会
污染全局。













