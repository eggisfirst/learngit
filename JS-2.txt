1.对象
对象是引用值，一切对象都有属性和方法。函数、数组可以称为对象。
原始值本身不可以有属性方法(string number boolean null undefined),但是可以转化为对象
除了null undefined

转化对象要加new
var num = new Number(123)  这时候num就是一个对象，可以加属性，num.abc = a 同时也可以作为
                           数字运算 num*2 = 246，对象不变
var str = new String('abcd')
var bol = new Boolean('true') 						   

2.对象的增、删、改、查
obj.name = " "  赋值就是增
obj.name = " "  也可以改值
delete obj.name 就是删掉 

3.对象创建方法
①var obj = {}   plainObject  叫对象字面量或者对象直接量
②构造函数 
 1>系统自带的构造函数  Object()  Array()  Nember()
 var obj = new Object()  new+构造函数返回一个对象
 2>自定义  大驼峰命名，首字母都大写
 function Car(){
    // （var this = {}） var this = {__proto__:Car.prototyoe,name:'',color:''}
    this.name = name;
	this.color = color;
	this.health = 100;
	this.run = function(){
	     this.health--;
	}
	//（return this）
 }                         --->相当于批量生产了很多一样但是又各自独立的个体。
 var car = new Car(name,color)  可以传参数
 
 构造对象内部的原理   加new才产生这个过程!!!
 1.在函数提最前面隐式加 var this = {}    --->相当于AO{this{}}
 2.执行 this.xxx = xxx
 3.隐式return this     --->可以用显示return{}对象(函数 数组)代替隐式，但是不能使用原始值
                           return 123，系统会自动忽略继续return  this
 
 4.包装类
 var str = 'abcd';
//系统自动new String('abcd').length = 2  然后delete 
 str.length = 2 ;                                   --->因为str没有length这个属性
 console.log(str); abcd         
//系统再次new String('abcd').length   这个跟上面的不是同一个对象!!!
 console.log(str.length);4  这次访问的是系统的new string        
 
 5.原型
 任何一个函数都有一个属性叫prototype，只有构造函数的原型能供构造出来的对象使用方法和属性。
 在构造函数里面才有意义。
 function Person(){}
 var person = new Person()
 Person出生的时候就有Person.prototype这个属性，是一个空的对象
 一个对象有自己的属性也有原型的属性，如果自己身上没有会去原型上找
new Psrson产生person的时候产生的this里面就有隐式属性__proto__：指向Person.prototype，当手动更改__proto__指向，
 person的原型不再是Person.prototyoe
 原型可以形成原型链，终端是Object.prototyoe，例外：var obj = Object.create(null)里面不存在__proto__
 var demo = {
     color : 'red'，
 }
 var obj = Object.create(demo)
 ----> obj = {
			__proto__:demo
 }
 Object.create()  使obj的原型变成demo
 obj.color  --> red 当obj想改color时候就会在自身添加color这个属性，不影响原型。
 
 方法的重写
 和原型链终端名字一样但功能不同
 Object.prototyoe.toString()  终端的方法
 Number.prototyoe.toString()  电脑自身重写的方法
 Array.prototyoe.toString()
 我们也也可以在原型链上修改这个方法
 Object.prototyoe.toString= function () {
		return 'haha'
 }
 var obj = {} ; 
 obj.toString()；
 Object.prototyoe.toString.call([])  call里面的数据会调用toString这个方法，返回里面的数据类型
 
 6.call/apply
 区别是call需要把实参按形参个数传进去，apply需要传一个数组，把参数用数组形式传进去。
function Person(name,age){
	this.name = name;     ---> obj.name
	this.age = age;	      ---> obj.age
}
var person = new Person('chen',100)
var obj = {};
Person.call(obj,name,age)
call就是把函数的this指向都变成obj，相当于obj调用Person()这个函数
借用别人的方法来构造自己的属性。但是原型并没有复制过来。

7.继承  圣杯模式
var inherit = (function () {
	  var F = function(){};                    --->使用了闭包，把F函数返回出去。
	  return function(Target,Origin){
		F.prototype = Origin.prototype;
		Target.prototype = new F();
		Target.prototype.constuctor = Target;
		Target.prototype.uber = Origin.prototype;
	  }
  }())
 Father.prototype.name = 'chen';
     function Father(){}
     function Son(){}             
     inherit(Son,Father)
     var son = new Son()
     var father = new Father()

Son.prototyoe ---> new F() ---> F.prototyoe == Father.prototyoe 
所以Son.prototyoe改变不影响Father.prototyoe改变
 
 小知识点：
 8.属性拼接
 查找属性原本是 obj.name ---> obj['name']
 会有一个隐式转化，先把属性名转成字符串形式来查找。
 想把属性名跟数字拼接，就可以用this['name' + num]
 
 9.遍历对象
 var obj = {};
 for(var prop in obj){
   if(obj.hasOwbProperty){   ---->判断这个变量是不是自己的，为了不拿原型上的属性
	console.log(prop)
	console.log(obj[prop])
 }}
obj-->要遍历的对象，prop是把遍历出来的存储变量，设任何值

10. A instanceof  B  判断A对象的原型链上有没有B的原型，有返回true没有false

区分数组和对象的方法
1.X.constuctor  数组会返回array  对象返回object
2.X instanceof Array 是数组返回true
3.Object.prototyoe.toString.call(X)  返回[Object Array/Object]

11.this  !!!
在预编译中AO对象产生包含 this:window  指向window，而在全局里this也指向window
只有没有定义this，都是指向window


一旦经历了全局里var的操作，所得出的属性，在window上，这种属性叫不可配置的属性。
这种属性delete不掉!!!!
或者立即执行函数，传形参相当于var x



 
 
 
 
 
 